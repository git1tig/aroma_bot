# -*- coding: utf-8 -*-
import os
import telebot
import openai
from dotenv import load_dotenv
import pandas as pd
import requests
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.schema import Document  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
MASLA_FILE = "/app/mono_oils.txt"
FAISS_INDEX_FILE = "/app/index.faiss"

# === –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê FAISS ===
embs = OpenAIEmbeddings()
db = None  # –û–±—ä—è–≤–ª—è–µ–º db –∑–∞—Ä–∞–Ω–µ–µ

if os.path.exists(FAISS_INDEX_FILE):
    print("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ —Ñ–∞–π–ª–∞...")
    db = FAISS.load_local(FAISS_INDEX_FILE, embs, allow_dangerous_deserialization=True)
else:
    print("‚ö†Ô∏è –§–∞–π–ª FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")

    if not os.path.exists(MASLA_FILE):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {MASLA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")

    with open(MASLA_FILE, 'r', encoding='utf-8') as f:
        my_text = f.read()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[("#", "Header 1")])
    chunks = splitter.split_text(my_text)  # ‚úÖ `split_text()` —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã


    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å OpenAI Embeddings
    db = FAISS.from_documents(chunks, embs)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    db.save_local(FAISS_INDEX_FILE)
    print("‚úÖ FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS (UTF-8) ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding='utf-8')
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)  # –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å

# === GPT-–§–£–ù–ö–¶–ò–ò ===
s1 = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å–µ–ª..."
s2 = "–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–µ –º–∞—Å–ª–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞..."
gpt_sys = '–¢—ã –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º, –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—É—Ç–∏ –µ—ë —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —ç—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–µ–ª, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ñ–∏—Ä–Ω—ã–º–∏ –º–∞—Å–ª–∞–º–∏ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞–π–Ω–µ –∫–æ—Ä–æ—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º, –∏ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç–µ–±—è —Ç–∞–∫–∏–µ —Ç–µ–º—ã –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. –ï—Å–ª–∏ —Ä–µ—á—å –∏–¥—ë—Ç –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –∫–∞–∫–æ–µ —ç—Ñ–∏—Ä–Ω–æ–µ –º–∞—Å–ª–æ –µ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç'


def gpt_for_query(prompt, system):
    response = openai.chat.completions.create(
        model='gpt-4o-mini',
        messages=[{"role": "system", "content": system},
                  {"role": "user", "content": prompt}],
        temperature=1
    )
    return response.choices[0].message.content

# === –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢ ===
user_states = {}

WAITING_OIL_NAME = "waiting_for_oil"
WAITING_NEXT_OIL = "waiting_for_next_oil"

@bot.message_handler(commands=['—Ä'])
def oil_command(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ ('*' - –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥):")
    user_states[message.chat.id] = WAITING_NEXT_OIL

@bot.message_handler(commands=['–º'])
def oil_command(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞:")
    user_states[message.chat.id] = WAITING_OIL_NAME

@bot.message_handler(commands=['—Å—Ç–æ–ø'])
def cancel_command(message):
    bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /–º.")
    user_states.pop(message.chat.id, None)

# === –û–¢–ü–†–ê–í–ö–ê –î–õ–ò–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
MAX_MESSAGE_LENGTH = 4000  # –ß—É—Ç—å –º–µ–Ω—å—à–µ 4096, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫

def send_long_message(chat_id, text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏."""
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        bot.send_message(chat_id, text[i:i + MAX_MESSAGE_LENGTH])

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    user_input = message.text.strip().lower()
    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if message.chat.id in user_states:
        state = user_states[message.chat.id]

        if state == WAITING_OIL_NAME:
            if db:
                docs = db.similarity_search_with_score(user_input, k=3)
                extracted_texts = [doc[0].page_content for doc in docs]
                faiss_results = "\n".join(extracted_texts)

                gpt_prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_input}".
                –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:
                {faiss_results}
                –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.
                """

                gpt_response = gpt_for_query(gpt_prompt, "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º. –û—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.")

                bot.reply_to(message, gpt_response)
                del user_states[message.chat.id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
            else:
                bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö FAISS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        elif state == WAITING_NEXT_OIL:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å–ª–æ –≤ –±–∞–∑–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            oil_names = df["Name"].str.lower().tolist()  # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Å–µ–ª –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            if user_input in oil_names:
                bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å–ª–æ: {user_input}. –°–∫–æ–ª—å–∫–æ –∫–∞–ø–µ–ª—å?")
                user_states[message.chat.id] = WAITING_DROPS  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                bot.reply_to(message, f"‚ö†Ô∏è –ú–∞—Å–ª–æ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

        elif state == WAITING_DROPS:
            try:
                drops = int(user_input)
                bot.reply_to(message, f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {drops} –∫–∞–ø–µ–ª—å –º–∞—Å–ª–∞.")
                del user_states[message.chat.id]  # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            except ValueError:
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–ø–µ–ª—å.")

    else:
        if db:
            docs = db.similarity_search(user_input, k=5)
            extracted_texts = [doc.page_content for doc in docs]
            faiss_results = "\n".join(extracted_texts)

            gpt_prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_input}".
            –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:
            {faiss_results}
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.
            """

            gpt_response = gpt_for_query(gpt_prompt, "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º. –û—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.")

            if len(gpt_response) > 4000:
                send_long_message(message.chat.id, gpt_response)
            else:
                bot.reply_to(message, gpt_response)
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö FAISS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")



if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    bot.infinity_polling()
