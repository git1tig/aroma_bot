import os
import telebot
import openai
from dotenv import load_dotenv
import pandas as pd
import requests
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.schema import Document
import re

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="MarkdownV2")
print("[DEBUG] –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
MASLA_FILE = "/app/mono_oils.txt"
FAISS_INDEX_FILE = "/app/index.faiss"

# === –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê FAISS ===
embs = OpenAIEmbeddings()
db = None

if os.path.exists(FAISS_INDEX_FILE):
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
    db = FAISS.load_local(FAISS_INDEX_FILE, embs, allow_dangerous_deserialization=True)
else:
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ...")
    if not os.path.exists(MASLA_FILE):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {MASLA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")
    with open(MASLA_FILE, 'r', encoding='utf-8') as f:
        my_text = f.read()
    splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[("#", "Header 1")])
    chunks = splitter.split_text(my_text)  # ‚úÖ `split_text()` —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    print(f"[DEBUG] –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π")
    db = FAISS.from_documents(chunks, embs)
    db.save_local(FAISS_INDEX_FILE)
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding='utf-8')
    print("[DEBUG] –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets")
except Exception as e:
    print("[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô ===
user_states = {}
drops_counts = {}
current_oils = {}
drop_session_changes = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
WAITING_OIL_NAME = "waiting_for_oil"           # –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–º
WAITING_NEXT_OIL = "waiting_for_next_oil"        # –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /—Ä, –æ–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ –∏–ª–∏ "*"
WAITING_DROPS = "waiting_for_drop_quantity"      # –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /—Ä, –æ–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å

# === –§–£–ù–ö–¶–ò–Ø GPT-4o ===
def gpt_for_query(prompt: str, system_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GPT-4o-mini –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4o: {prompt} | –°–∏—Å—Ç–µ–º–∞: {system_message}")
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt}
        ],
        temperature=1
    )
    result = response.choices[0].message.content
    print(f"[DEBUG] –û—Ç–≤–µ—Ç GPT-4o –ø–æ–ª—É—á–µ–Ω")
    return result

# === –§–£–ù–ö–¶–ò–Ø –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø MARKDOWNV2 ===
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram."""
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def start_command(message):
    print(f"[DEBUG] /start –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(message, escape_markdown("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º\\.\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"), parse_mode="MarkdownV2")

@bot.message_handler(commands=['–º'])
def oil_command(message):
    print(f"[DEBUG] /–º –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(message, escape_markdown("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º\\!"), parse_mode="MarkdownV2")
    user_states[message.chat.id] = WAITING_OIL_NAME
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_OIL_NAME}")

@bot.message_handler(commands=['—Ä'])
def mix_command(message):
    print(f"[DEBUG] /—Ä –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ \(–Ω–∞–ø—Ä–∏–º–µ—Ä, *–õ–∞–≤–∞–Ω–¥–∞*, *–õ–∏–º–æ–Ω*, *–ú—è—Ç–∞*\)\\.\n\n"
                        "üõë –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ —Å–º–µ—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*`\\."),
        parse_mode="MarkdownV2"
    )
    user_states[message.chat.id] = WAITING_NEXT_OIL
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_NEXT_OIL}")

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={message.chat.id}: {message.text}")
    user_input = message.text.strip().lower()
    
    if message.chat.id in user_states:
        state = user_states[message.chat.id]
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è {state} –¥–ª—è chat_id={message.chat.id}")
        if state == WAITING_OIL_NAME:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–º: –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –º–∞—Å–ª—É –≤ FAISS
            docs = db.similarity_search(user_input, k=1)
            if docs:
                bot.reply_to(message, escape_markdown(f"üìñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_input}*\n\n{docs[0].page_content}"), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_input}'")
            else:
                bot.reply_to(message, escape_markdown("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ\\."), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{user_input}'")
            user_states.pop(message.chat.id, None)
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –æ—á–∏—â–µ–Ω–æ")
        elif state == WAITING_NEXT_OIL:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—Ä: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Å–ª–∞ –∏–ª–∏ '*' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ—Å–∏
            if user_input == "*":
                total_cost = int(drops_counts.get(message.chat.id, 0))
                mix_info = "\n".join(drop_session_changes.get(message.chat.id, []))
                bot.reply_to(message, escape_markdown(f"üéâ –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!\n\n"
                                                      f"üß™ *–°–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:*\n{mix_info}\n\n"
                                                      f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}—Ä\\."), parse_mode="MarkdownV2")
                print(f"[DEBUG] –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è chat_id={message.chat.id}")
                user_states.pop(message.chat.id, None)
                return
            if user_input.capitalize() not in df['Name'].values:
                bot.reply_to(message, escape_markdown(f'‚ùå –ú–∞—Å–ª–æ "{user_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ú–∞—Å–ª–æ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
                return
            current_oils[message.chat.id] = user_input
            user_states[message.chat.id] = WAITING_DROPS
            bot.reply_to(message, escape_markdown(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –¥–ª—è {user_input}\\:"), parse_mode="MarkdownV2")
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {WAITING_DROPS}")
        elif state == WAITING_DROPS:
            if not user_input.replace(" ", "").isdigit():
                bot.reply_to(message, escape_markdown("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å\\:"), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –æ—Ç chat_id={message.chat.id}")
                return
            drop_count = int(user_input.replace(" ", ""))
            oil_name = current_oils[message.chat.id].capitalize()
            # –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–π –∫–∞–ø–ª–∏
            if oil_name in df["Name"].values:
                oil_price = df.loc[df["Name"] == oil_name, "Price"].values[0]
                oil_volume = df.loc[df["Name"] == oil_name, "Vol"].values[0]
                drop_price = oil_price / (oil_volume * 25)
                total_price = drop_price * drop_count
            else:
                total_price = 0
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            drops_counts[message.chat.id] = drops_counts.get(message.chat.id, 0) + total_price
            drop_session_changes[message.chat.id] = drop_session_changes.get(message.chat.id, []) + [f"{oil_name}, {drop_count} –∫–∞–ø–µ–ª—å"]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = (
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{oil_name}* ‚Äî {drop_count} –∫–∞–ø–µ–ª—å\\.\n"
                f"–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:\n{'; '.join(drop_session_changes[message.chat.id])}\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {int(drops_counts[message.chat.id])}—Ä\\.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\\."
            )
            bot.reply_to(message, escape_markdown(summary), parse_mode="MarkdownV2")
            print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –¥–ª—è chat_id={message.chat.id}")
            user_states[message.chat.id] = WAITING_NEXT_OIL
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {WAITING_NEXT_OIL}")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç chat_id={message.chat.id}")
        keywords = gpt_for_query(user_input, "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å–ª–∞—Ö.")
        print(f"[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        docs = db.similarity_search(keywords, k=5)
        search_results = "\n\n".join([doc.page_content for doc in docs])
        final_response = gpt_for_query(
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n{search_results}",
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º. –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞."
        )
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT-4o")
        bot.reply_to(message, escape_markdown(final_response), parse_mode="MarkdownV2")
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é chat_id={message.chat.id}")

if __name__ == "__main__":
    print("[DEBUG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()
