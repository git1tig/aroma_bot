import os
import telebot
import openai
import tempfile
import io
from dotenv import load_dotenv
import pandas as pd
from pydub import AudioSegment, silence
from assistent import AssistantDialogManager

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô –ò –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–ê –ë–û–¢–ê ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="MarkdownV2")
print("[DEBUG] –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS –î–õ–Ø –†–ï–ñ–ò–ú–ê /—Ä ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding="utf-8")
    print("[DEBUG] –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets")
except Exception as e:
    print("[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (–∏–∑ assistent.py) ===
assistant_manager = AssistantDialogManager(time_limit=1200)  # 20 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
user_states = {}
drops_counts = {}
current_oils = {}
drop_session_changes = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ /—Ä)
WAITING_NEXT_OIL = "waiting_for_next_oil"
WAITING_DROPS = "waiting_for_drop_quantity"

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def show_bot_capabilities(chat_id):
    """
    –ú–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.
    """
    capabilities = (
        "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n\n"
        "‚úÖ `/start` ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚úÖ `/—Ä` ‚Äì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Å—å –º–∞—Å–µ–ª\n"
        "‚úÖ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
    )
    bot.send_message(chat_id, escape_markdown(capabilities), parse_mode="MarkdownV2")

def simple_transcribe_audio(audio_file_path, silence_thresh=-40.0, min_silence_len=1000):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ—Ç—É.
    –ï—Å–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None.
    """
    try:
        audio = AudioSegment.from_file(audio_file_path)
        
        # –ï—Å–ª–∏ –∞—É–¥–∏–æ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if len(audio) == 0:
            print("–ê—É–¥–∏–æ—Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∞—É–¥–∏–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        nonsilent_segments = silence.detect_nonsilent(
            audio, 
            min_silence_len=min_silence_len, 
            silence_thresh=silence_thresh
        )
        if len(nonsilent_segments) == 0:
            print("–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∏—à–∏–Ω—É.")
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ WAV
        audio = audio.set_channels(1)
        wav_io = io.BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)
        wav_io.name = "audio.wav"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Whisper API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = openai.audio.transcriptions.create(
            file=wav_io,
            model="whisper-1",
            language="ru",
            response_format="json"
        )
        text = transcript.text.strip()
        return text if text else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", flush=True)
        return None

@bot.message_handler(commands=['start'])
def start_command(message):
    print(f"[DEBUG] /start –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º\\.\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"),
        parse_mode="MarkdownV2"
    )
    show_bot_capabilities(message.chat.id)

@bot.message_handler(commands=['—Ä'])
def mix_command(message):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–º–µ—Å–∏ –º–∞—Å–µ–ª.
    """
    print(f"[DEBUG] /—Ä –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–∞–≤–∞–Ω–¥–∞, –õ–∏–º–æ–Ω, –ú—è—Ç–∞\\)\\.\n\n"
                        "üõë –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ —Å–º–µ—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*`\\."), 
        parse_mode="MarkdownV2"
    )
    user_states[message.chat.id] = WAITING_NEXT_OIL
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_NEXT_OIL}")

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Speech-to-Text).
    """
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={message.chat.id}")
    try:
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_audio:
            temp_audio.write(downloaded_file)
            temp_audio_path = temp_audio.name

        recognized_text = simple_transcribe_audio(temp_audio_path)
        os.remove(temp_audio_path)

        if recognized_text:
            print(f"[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_input, –ø–æ–¥–º–µ–Ω–∏–≤ message.text
            message.text = recognized_text
            handle_input(message)
   
