import os
import telebot
import openai
import tempfile
import io
from dotenv import load_dotenv
import pandas as pd
from pydub import AudioSegment, silence
from assistent import AssistantDialogManager

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô –ò –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–ê –ë–û–¢–ê ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="MarkdownV2")
print("[DEBUG] –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS –î–õ–Ø –†–ï–ñ–ò–ú–ê /—Ä ===
print("[DEBUG] –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding="utf-8")
    print("[DEBUG] –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets")
except Exception as e:
    print(f"[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (–∏–∑ assistent.py) ===
print("[DEBUG] –°–æ–∑–¥–∞—ë–º AssistantDialogManager...")
assistant_manager = AssistantDialogManager(time_limit=1200)  # 20 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
user_states = {}
drops_counts = {}
current_oils = {}
drop_session_changes = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ /—Ä)
WAITING_NEXT_OIL = "waiting_for_next_oil"
WAITING_DROPS = "waiting_for_drop_quantity"

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    print("[DEBUG] escape_markdown –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–æ–π", len(text))
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def show_bot_capabilities(chat_id):
    """
    –ú–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.
    """
    print(f"[DEBUG] show_bot_capabilities –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_id={chat_id}")
    capabilities = (
        "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n\n"
        "‚úÖ `/start` ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚úÖ `/—Ä` ‚Äì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Å—å –º–∞—Å–µ–ª\n"
        "‚úÖ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
    )
    bot.send_message(chat_id, escape_markdown(capabilities), parse_mode="MarkdownV2")

def simple_transcribe_audio(audio_file_path, silence_thresh=-40.0, min_silence_len=1000):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ—Ç—É.
    –ï—Å–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None.
    """
    print(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: {audio_file_path}")
    try:
        audio = AudioSegment.from_file(audio_file_path)
        print(f"[DEBUG] –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio)} –º—Å")

        # –ï—Å–ª–∏ –∞—É–¥–∏–æ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if len(audio) == 0:
            print("[DEBUG] –ê—É–¥–∏–æ—Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∞—É–¥–∏–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        print("[DEBUG] –ü–æ–∏—Å–∫ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        nonsilent_segments = silence.detect_nonsilent(
            audio, 
            min_silence_len=min_silence_len, 
            silence_thresh=silence_thresh
        )
        if len(nonsilent_segments) == 0:
            print("[DEBUG] –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–∏—à–∏–Ω—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ WAV
        print("[DEBUG] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ –º–æ–Ω–æ WAV –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Whisper...")
        audio = audio.set_channels(1)
        wav_io = io.BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)
        wav_io.name = "audio.wav"
        
        print("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WAV –≤ Whisper API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
        transcript = openai.Audio.transcribe(
            model="whisper-1",
            file=wav_io,
            language="ru"
        )
        text = transcript.get("text", "").strip()
        print(f"[DEBUG] Whisper –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: {text!r}")
        return text if text else None
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", flush=True)
        return None

@bot.message_handler(commands=['start'])
def start_command(message):
    print(f"[DEBUG] start_command –≤—ã–∑–≤–∞–Ω –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º\\.\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"),
        parse_mode="MarkdownV2"
    )
    show_bot_capabilities(message.chat.id)

@bot.message_handler(commands=['—Ä'])
def mix_command(message):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–º–µ—Å–∏ –º–∞—Å–µ–ª.
    """
    print(f"[DEBUG] mix_command (/—Ä) –≤—ã–∑–≤–∞–Ω –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–∞–≤–∞–Ω–¥–∞, –õ–∏–º–æ–Ω, –ú—è—Ç–∞\\)\\.\n\n"
            "üõë –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ —Å–º–µ—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*`\\."
        ), 
        parse_mode="MarkdownV2"
    )
    user_states[message.chat.id] = WAITING_NEXT_OIL
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_NEXT_OIL}")

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Speech-to-Text).
    """
    print(f"[DEBUG] handle_voice_message –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_id={message.chat.id}")
    try:
        file_info = bot.get_file(message.voice.file_id)
        print("[DEBUG] file_info –ø–æ–ª—É—á–µ–Ω:", file_info)
        downloaded_file = bot.download_file(file_info.file_path)
        print("[DEBUG] –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω, –¥–ª–∏–Ω–∞:", len(downloaded_file))

        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_audio:
            temp_audio.write(downloaded_file)
            temp_audio_path = temp_audio.name
        print(f"[DEBUG] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_audio_path}")

        recognized_text = simple_transcribe_audio(temp_audio_path)
        print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {recognized_text!r}")
        os.remove(temp_audio_path)

        if recognized_text:
            print("[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç. –ü–µ—Ä–µ–¥–∞—ë–º –≤ handle_input...")
            message.text = recognized_text
            handle_input(message)
        else:
            print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            bot.reply_to(
                message,
                escape_markdown("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ –ø—É—Å—Ç–æ–µ\\."),
                parse_mode="MarkdownV2"
            )
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(
            message,
            escape_markdown("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."),
            parse_mode="MarkdownV2"
        )

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ /start, –Ω–µ /—Ä).
    """
    print(f"[DEBUG] handle_input –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_id={message.chat.id}")
    print(f"[DEBUG] –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (lowercase) = {message.text.lower()!r}")
    user_input = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ "—Ä–µ–∂–∏–º–µ"
    if message.chat.id in user_states:
        state = user_states[message.chat.id]
        print(f"[DEBUG] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

        # –†–ï–ñ–ò–ú "/—Ä": –í–í–û–î –ù–ê–ó–í–ê–ù–ò–ô –ú–ê–°–ï–õ –ò –ò–• –ö–û–õ–ò–ß–ï–°–¢–í–ê
        if state == WAITING_NEXT_OIL:
            print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å–ª–∞ –∏–ª–∏ * –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            if user_input == "*":
                print("[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ—Å–∏.")
                total_cost = int(drops_counts.get(message.chat.id, 0))
                mix_info = "\n".join(drop_session_changes.get(message.chat.id, []))
                bot.reply_to(
                    message,
                    escape_markdown(
                        f"üéâ –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!\n\n"
                        f"üß™ *–°–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:*\n{mix_info}\n\n"
                        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}—Ä\\."
                    ),
                    parse_mode="MarkdownV2"
                )
                print(f"[DEBUG] –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è chat_id={message.chat.id}")
                show_bot_capabilities(message.chat.id)
                drops_counts.pop(message.chat.id, None)
                drop_session_changes.pop(message.chat.id, None)
                user_states.pop(message.chat.id, None)
                return

            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å–ª–æ '{user_input}' –≤ —Ç–∞–±–ª–∏—Ü–µ...")
            if user_input.capitalize() not in df['Name'].values:
                print("[DEBUG] –ú–∞—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
                bot.reply_to(
                    message,
                    escape_markdown(f'‚ùå –ú–∞—Å–ª–æ "{user_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'),
                    parse_mode="MarkdownV2"
                )
                return

            print("[DEBUG] –ú–∞—Å–ª–æ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å.")
            current_oils[message.chat.id] = user_input
            user_states[message.chat.id] = WAITING_DROPS
            bot.reply_to(
                message,
                escape_markdown(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –¥–ª—è {user_input}\\:"),
                parse_mode="MarkdownV2"
            )
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {WAITING_DROPS}")

        elif state == WAITING_DROPS:
            print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å...")
            if not user_input.replace(" ", "").isdigit():
                print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ.")
                bot.reply_to(
                    message,
                    escape_markdown("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å\\:"),
                    parse_mode="MarkdownV2"
                )
                return

            drop_count = int(user_input.replace(" ", ""))
            oil_name = current_oils[message.chat.id].capitalize()
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å {drop_count} –∫–∞–ø–µ–ª—å –º–∞—Å–ª–∞ {oil_name}")

            if oil_name in df["Name"].values:
                oil_price = df.loc[df["Name"] == oil_name, "Price"].values[0]
                oil_volume = df.loc[df["Name"] == oil_name, "Vol"].values[0]
                drop_price = oil_price / (oil_volume * 25)
                total_price = drop_price * drop_count
                print(f"[DEBUG] –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏: drop_price={drop_price}, total_price={total_price}")
            else:
                total_price = 0
                print("[DEBUG] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ, total_price=0")

            drops_counts[message.chat.id] = drops_counts.get(message.chat.id, 0) + total_price
            drop_session_changes[message.chat.id] = drop_session_changes.get(message.chat.id, []) + [
                f"{oil_name}, {drop_count} –∫–∞–ø–µ–ª—å"
            ]

            summary = (
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{oil_name}* ‚Äî {drop_count} –∫–∞–ø–µ–ª—å\\.\n"
                f"–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:\n{'; '.join(drop_session_changes[message.chat.id])}\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {int(drops_counts[message.chat.id])}—Ä\\.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\\."
            )
            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n{summary}")
            bot.reply_to(message, escape_markdown(summary), parse_mode="MarkdownV2")
            user_states[message.chat.id] = WAITING_NEXT_OIL
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ {WAITING_NEXT_OIL}")

    else:
        # –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú: –ü–ï–†–ï–î–ê–Å–ú –°–û–û–ë–©–ï–ù–ò–ï –ê–°–°–ò–°–¢–ï–ù–¢–£ (–ë–ï–ó –õ–û–ö–ê–õ–¨–ù–û–ô –ë–ê–ó–´)
        print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ /—Ä, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É...")
        assistant_reply = assistant_manager.ask_assistant(message.chat.id, message.text.strip())
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{assistant_reply!r}")

        bot.reply_to(message, escape_markdown(assistant_reply), parse_mode="MarkdownV2")
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω chat_id={message.chat.id}")

if __name__ == "__main__":
    print("[DEBUG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()
