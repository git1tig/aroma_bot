import os
import telebot
import openai
import tempfile
import io
from dotenv import load_dotenv
import pandas as pd
import requests
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.schema import Document
import re
from pydub import AudioSegment, silence

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="MarkdownV2")
print("[DEBUG] –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
MASLA_FILE = "/app/mono_oils.txt"
FAISS_INDEX_FILE = "/app/index.faiss"

# === –ó–ê–ì–†–£–ó–ö–ê FAISS ===
embs = OpenAIEmbeddings()
db = None

if os.path.exists(FAISS_INDEX_FILE):
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
    db = FAISS.load_local(FAISS_INDEX_FILE, embs, allow_dangerous_deserialization=True)
else:
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ...")
    if not os.path.exists(MASLA_FILE):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {MASLA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")
    with open(MASLA_FILE, "r", encoding="utf-8") as f:
        my_text = f.read()
    splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[("#", "Header 1")])
    chunks = splitter.split_text(my_text)
    db = FAISS.from_documents(chunks, embs)
    db.save_local(FAISS_INDEX_FILE)
    print("[DEBUG] FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding="utf-8")
    print("[DEBUG] –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets")
except Exception as e:
    print("[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
user_states = {}
drops_counts = {}
current_oils = {}
drop_session_changes = {}
sys1 = ("–¢—ã –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º, "
        "–¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—É—Ç–∏ –µ—ë —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —ç—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–µ–ª, "
        "–µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ñ–∏—Ä–Ω—ã–º–∏ –º–∞—Å–ª–∞–º–∏ –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞–π–Ω–µ –∫–æ—Ä–æ—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º, –∏ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç–µ–±—è —Ç–∞–∫–∏–µ —Ç–µ–º—ã –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. "
        "–ï—Å–ª–∏ —Ä–µ—á—å –∏–¥—ë—Ç –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –∫–∞–∫–æ–µ —ç—Ñ–∏—Ä–Ω–æ–µ –º–∞—Å–ª–æ –µ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_OIL_NAME = "waiting_for_oil"
WAITING_NEXT_OIL = "waiting_for_next_oil"
WAITING_DROPS = "waiting_for_drop_quantity"

def gpt_for_query(prompt: str, system_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GPT-4o-mini –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4o: {prompt} | –°–∏—Å—Ç–µ–º–∞: {system_message}")
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt}
        ],
        temperature=1
    )
    result = response.choices[0].message.content
    print("[DEBUG] –û—Ç–≤–µ—Ç GPT-4o –ø–æ–ª—É—á–µ–Ω")
    return result

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def show_bot_capabilities(chat_id):
    capabilities = (
        "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*\n\n"
        "‚úÖ `/start` ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚úÖ `/–º` ‚Äì –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ–∏—Ä–Ω–æ–º –º–∞—Å–ª–µ\n"
        "‚úÖ `/—Ä` ‚Äì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Å—å –º–∞—Å–µ–ª\n"
        "‚úÖ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
    )
    bot.send_message(chat_id, escape_markdown(capabilities), parse_mode="MarkdownV2")

def simple_transcribe_audio(audio_file_path):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper API.
    –ê—É–¥–∏–æ—Ñ–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–Ω–æ WAV —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BytesIO,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None.
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–æ–Ω–æ WAV –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ BytesIO
        audio = AudioSegment.from_file(audio_file_path)
        audio = audio.set_channels(1)
        wav_io = io.BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript = openai.Audio.transcribe("whisper-1", wav_io, language="ru")
        text = transcript.get("text", "").strip()
        return text if text else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", flush=True)
        return None

@bot.message_handler(commands=['start'])
def start_command(message):
    print(f"[DEBUG] /start –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(message, escape_markdown("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º\\.\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"), parse_mode="MarkdownV2")
    show_bot_capabilities(message.chat.id)

@bot.message_handler(commands=['–º'])
def oil_command(message):
    print(f"[DEBUG] /–º –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(message, escape_markdown("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º\\!"), parse_mode="MarkdownV2")
    user_states[message.chat.id] = WAITING_OIL_NAME
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_OIL_NAME}")

@bot.message_handler(commands=['—Ä'])
def mix_command(message):
    print(f"[DEBUG] /—Ä –æ—Ç chat_id={message.chat.id}")
    bot.reply_to(
        message,
        escape_markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–∞–≤–∞–Ω–¥–∞, –õ–∏–º–æ–Ω, –ú—è—Ç–∞\\)\\.\n\n"
                        "üõë –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ —Å–º–µ—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*`\\."), 
        parse_mode="MarkdownV2"
    )
    user_states[message.chat.id] = WAITING_NEXT_OIL
    print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {WAITING_NEXT_OIL}")

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={message.chat.id}")
    try:
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ogg
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_audio:
            temp_audio.write(downloaded_file)
            temp_audio_path = temp_audio.name

        recognized_text = simple_transcribe_audio(temp_audio_path)
        os.remove(temp_audio_path)

        if recognized_text:
            print(f"[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")
            message.text = recognized_text
            handle_input(message)
        else:
            bot.reply_to(message, escape_markdown("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ –ø—É—Å—Ç–æ–µ\\."), parse_mode="MarkdownV2")
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, escape_markdown("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\."), parse_mode="MarkdownV2")

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={message.chat.id}: {message.text}")
    user_input = message.text.strip().lower()

    if message.chat.id in user_states:
        state = user_states[message.chat.id]
        print(f"[DEBUG] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id}: {state}")
        if state == WAITING_OIL_NAME:
            docs = db.similarity_search(user_input, k=1)
            if docs:
                bot.reply_to(message, escape_markdown(f"üìñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_input}*\n\n{docs[0].page_content}"), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{user_input}'")
                show_bot_capabilities(message.chat.id)
            else:
                bot.reply_to(message, escape_markdown("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ\\."), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{user_input}'")
                show_bot_capabilities(message.chat.id)
            user_states.pop(message.chat.id, None)
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –æ—á–∏—â–µ–Ω–æ")
        elif state == WAITING_NEXT_OIL:
            if user_input == "*":
                total_cost = int(drops_counts.get(message.chat.id, 0))
                mix_info = "\n".join(drop_session_changes.get(message.chat.id, []))
                bot.reply_to(message, escape_markdown(f"üéâ –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!\n\n"
                                                      f"üß™ *–°–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:*\n{mix_info}\n\n"
                                                      f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}—Ä\\."), parse_mode="MarkdownV2")
                print(f"[DEBUG] –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è chat_id={message.chat.id}")
                show_bot_capabilities(message.chat.id)
                drops_counts.pop(message.chat.id, None)
                drop_session_changes.pop(message.chat.id, None)
                user_states.pop(message.chat.id, None)
                return
            if user_input.capitalize() not in df['Name'].values:
                bot.reply_to(message, escape_markdown(f'‚ùå –ú–∞—Å–ª–æ "{user_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ú–∞—Å–ª–æ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
                return
            current_oils[message.chat.id] = user_input
            user_states[message.chat.id] = WAITING_DROPS
            bot.reply_to(message, escape_markdown(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –¥–ª—è {user_input}\\:"), parse_mode="MarkdownV2")
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {WAITING_DROPS}")
        elif state == WAITING_DROPS:
            if not user_input.replace(" ", "").isdigit():
                bot.reply_to(message, escape_markdown("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å\\:"), parse_mode="MarkdownV2")
                print(f"[DEBUG] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –æ—Ç chat_id={message.chat.id}")
                return
            drop_count = int(user_input.replace(" ", ""))
            oil_name = current_oils[message.chat.id].capitalize()
            if oil_name in df["Name"].values:
                oil_price = df.loc[df["Name"] == oil_name, "Price"].values[0]
                oil_volume = df.loc[df["Name"] == oil_name, "Vol"].values[0]
                drop_price = oil_price / (oil_volume * 25)
                total_price = drop_price * drop_count
            else:
                total_price = 0
            drops_counts[message.chat.id] = drops_counts.get(message.chat.id, 0) + total_price
            drop_session_changes[message.chat.id] = drop_session_changes.get(message.chat.id, []) + [f"{oil_name}, {drop_count} –∫–∞–ø–µ–ª—å"]
            summary = (f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{oil_name}* ‚Äî {drop_count} –∫–∞–ø–µ–ª—å\\.\n"
                       f"–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:\n{'; '.join(drop_session_changes[message.chat.id])}\n"
                       f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {int(drops_counts[message.chat.id])}—Ä\\.\n\n"
                       "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\\.")
            bot.reply_to(message, escape_markdown(summary), parse_mode="MarkdownV2")
            print(f"[DEBUG] –°–≤–æ–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è chat_id={message.chat.id}")
            user_states[message.chat.id] = WAITING_NEXT_OIL
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id={message.chat.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {WAITING_NEXT_OIL}")
    else:
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç chat_id={message.chat.id}")
        keywords = gpt_for_query(user_input, "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å–ª–∞—Ö.")
        print(f"[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        docs = db.similarity_search(keywords, k=5)
        search_results = "\n\n".join([doc.page_content for doc in docs])
        final_response = gpt_for_query(
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n{search_results}", sys1
        )
        print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        bot.reply_to(message, escape_markdown(final_response), parse_mode="MarkdownV2")
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω chat_id={message.chat.id}")

if __name__ == "__main__":
    print("[DEBUG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()
