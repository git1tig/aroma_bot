import os
import telebot
import openai
from dotenv import load_dotenv
import pandas as pd
import requests
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.schema import Document
import re

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="MarkdownV2")

# === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
MASLA_FILE = "/app/mono_oils.txt"
FAISS_INDEX_FILE = "/app/index.faiss"

# === –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê FAISS ===
embs = OpenAIEmbeddings()
db = None

if os.path.exists(FAISS_INDEX_FILE):
    print("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ —Ñ–∞–π–ª–∞...")
    db = FAISS.load_local(FAISS_INDEX_FILE, embs, allow_dangerous_deserialization=True)
else:
    print("‚ö†Ô∏è –§–∞–π–ª FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")

    if not os.path.exists(MASLA_FILE):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {MASLA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")

    with open(MASLA_FILE, 'r', encoding='utf-8') as f:
        my_text = f.read()

    splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[("#", "Header 1")])
    chunks = splitter.split_text(my_text)  # ‚úÖ `split_text()` —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    db = FAISS.from_documents(chunks, embs)

    db.save_local(FAISS_INDEX_FILE)
    print("‚úÖ FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding='utf-8')
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô ===
user_states = {}
drops_counts = {}  
current_oils = {}  
drop_session_changes = {}  

WAITING_OIL_NAME = "waiting_for_oil"
WAITING_DROPS = "waiting_for_drop_quantity"
WAITING_NEXT_OIL = "waiting_for_next_oil"

# === –§–£–ù–ö–¶–ò–Ø –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø MARKDOWNV2 ===
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram."""
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.reply_to(message, escape_markdown("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º\\.\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"), parse_mode="MarkdownV2")

@bot.message_handler(commands=['–º'])
def oil_command(message):
    bot.reply_to(message, escape_markdown("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º\\!"), parse_mode="MarkdownV2")
    user_states[message.chat.id] = WAITING_OIL_NAME

@bot.message_handler(commands=['—Ä'])
def mix_command(message):
    bot.reply_to(
        message, 
        escape_markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ \(–Ω–∞–ø—Ä–∏–º–µ—Ä, *–õ–∞–≤–∞–Ω–¥–∞*, *–õ–∏–º–æ–Ω*, *–ú—è—Ç–∞*\)\\.\n\n"
                        "üõë –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ —Å–º–µ—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*`\\."), 
        parse_mode="MarkdownV2"
    )
    user_states[message.chat.id] = WAITING_NEXT_OIL

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    user_input = message.text.strip().lower()

    if message.chat.id in user_states:
        state = user_states[message.chat.id]

        if state == WAITING_NEXT_OIL:
            if user_input == "*":
                total_cost = int(drops_counts.get(message.chat.id, 0))
                mix_info = "; ".join(drop_session_changes.get(message.chat.id, []))
                bot.reply_to(message, escape_markdown(f"üéâ –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!\n\n"
                                                      f"üß™ *–°–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:* {mix_info}\n"
                                                      f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}—Ä\\."), 
                             parse_mode="MarkdownV2")
                user_states.pop(message.chat.id, None)
                return

            if user_input.capitalize() not in df['Name'].values:
                bot.reply_to(message, escape_markdown(f'‚ùå –ú–∞—Å–ª–æ "{user_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'), parse_mode="MarkdownV2")
                return

            current_oils[message.chat.id] = user_input
            user_states[message.chat.id] = WAITING_DROPS
            bot.reply_to(message, escape_markdown(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –¥–ª—è {user_input}\\:"), parse_mode="MarkdownV2")

        elif state == WAITING_DROPS:
            if not user_input.isdigit():
                bot.reply_to(message, escape_markdown("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å\\:"), parse_mode="MarkdownV2")
                return

            oil_name = current_oils[message.chat.id].capitalize()
            drop_count = int(user_input)

            if oil_name in df["Name"].values:
                oil_price = df.loc[df["Name"] == oil_name, "Price"].values[0]
                oil_volume = df.loc[df["Name"] == oil_name, "Vol"].values[0]
                drop_price = oil_price / (oil_volume * 25)
                total_price = drop_price * drop_count
            else:
                total_price = 0

            drops_counts[message.chat.id] = drops_counts.get(message.chat.id, 0) + total_price
            drop_session_changes[message.chat.id] = drop_session_changes.get(message.chat.id, []) + [f"{oil_name}, {user_input} –∫–∞–ø–µ–ª—å"]

            bot.reply_to(message, escape_markdown(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{oil_name}* ‚Äî {drop_count} –∫–∞–ø–µ–ª—å\\.\n"
                                                  f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {int(total_price)}—Ä\\.\n\n"
                                                  f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `*` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\\."), 
                         parse_mode="MarkdownV2")
            user_states[message.chat.id] = WAITING_NEXT_OIL
    else:
        print('–æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞')
if __name__ == "__main__":
    bot.infinity_polling()
