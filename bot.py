import os
import telebot
import openai
from dotenv import load_dotenv
import pandas as pd
import requests
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.schema import Document
import re

# === –ó–ê–ì–†–£–ó–ö–ê API-–ö–õ–Æ–ß–ï–ô ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ===
MASLA_FILE = "/app/mono_oils.txt"
FAISS_INDEX_FILE = "/app/index.faiss"

# === –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê FAISS ===
embs = OpenAIEmbeddings()
db = None

if os.path.exists(FAISS_INDEX_FILE):
    print("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ —Ñ–∞–π–ª–∞...")
    db = FAISS.load_local(FAISS_INDEX_FILE, embs, allow_dangerous_deserialization=True)
else:
    print("‚ö†Ô∏è –§–∞–π–ª FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")

    if not os.path.exists(MASLA_FILE):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {MASLA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")

    with open(MASLA_FILE, 'r', encoding='utf-8') as f:
        my_text = f.read()

    splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[("#", "Header 1")])
    chunks = splitter.split_text(my_text)  # ‚úÖ `split_text()` —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    db = FAISS.from_documents(chunks, embs)

    db.save_local(FAISS_INDEX_FILE)
    print("‚úÖ FAISS-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS ===
SHEET_URL = "https://docs.google.com/spreadsheets/d/1MknmvI9_YvjM7bge9tPryRKrrzCi-Ywc5ZfYiyb6Bdg/export?format=csv"
COLUMN_NAMES = ["Name", "Vol", "Price"]

try:
    df = pd.read_csv(SHEET_URL, names=COLUMN_NAMES, encoding='utf-8')
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
    df = pd.DataFrame(columns=COLUMN_NAMES)

# === –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô ===
user_states = {}
drops_counts = {}  
current_oils = {}  
drop_session_changes = {}  

WAITING_OIL_NAME = "waiting_for_oil"
WAITING_DROPS = "waiting_for_drop_quantity"
WAITING_NEXT_OIL = "waiting_for_next_oil"

# === –§–£–ù–ö–¶–ò–Ø –í–´–í–û–î–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ë–û–¢–ê ===
def send_bot_options(chat_id):
    bot.send_message(chat_id, 
                     "‚ú® –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å? ‚ú®\n\n"
                     "üõ† *–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
                     "‚úÖ `/—Ä` ‚Äì —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–º–µ—Å—å –º–∞—Å–µ–ª\n"
                     "‚úÖ `/–º` ‚Äì –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º —ç—Ñ–∏—Ä–Ω–æ–º –º–∞—Å–ª–µ\n"
                     "‚úÖ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!\n\n"
                     "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòä", 
                     parse_mode="Markdown")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!")
    send_bot_options(message.chat.id)

@bot.message_handler(commands=['—Ä'])
def oil_command(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞ ('*' - –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥):")
    user_states[message.chat.id] = WAITING_NEXT_OIL
    send_bot_options(message.chat.id)

@bot.message_handler(commands=['–º'])
def oil_command(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å–ª–∞:")
    user_states[message.chat.id] = WAITING_OIL_NAME
    send_bot_options(message.chat.id)

@bot.message_handler(commands=['—Å—Ç–æ–ø'])
def cancel_command(message):
    bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /–º.")
    user_states.pop(message.chat.id, None)

MAX_MESSAGE_LENGTH = 4000  

def send_long_message(chat_id, text):
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        bot.send_message(chat_id, text[i:i + MAX_MESSAGE_LENGTH])

@bot.message_handler(func=lambda message: True)
def handle_input(message):
    user_input = message.text.strip().lower()

    if message.chat.id in user_states:
        state = user_states[message.chat.id]

        if state == WAITING_OIL_NAME:
            if db:
                docs = db.similarity_search_with_score(user_input, k=1)
                if docs[0][1] < 0.37:
                    bot.reply_to(message, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user_input}: {docs[0][0].page_content}")
                else:
                    docs = db.similarity_search(user_input, k=1)
                    bot.reply_to(message, f'–ü–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å {user_input} –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ: {docs[0].page_content}')
            else:
                bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö FAISS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        elif state == WAITING_NEXT_OIL:
            if user_input != '*':
                if user_input.capitalize() not in df['Name'].values:
                    bot.reply_to(message, f'‚ö†Ô∏è –ú–∞—Å–ª–æ "{user_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ:')
                    return
                
                if message.chat.id not in drop_session_changes:
                    drop_session_changes[message.chat.id] = []
                    drops_counts[message.chat.id] = 0

                current_oils[message.chat.id] = user_input
                user_states[message.chat.id] = WAITING_DROPS

                existing_oils = "; ".join(drop_session_changes[message.chat.id])
                bot.reply_to(message, f"–£–∂–µ –≤–≤–µ–¥–µ–Ω–æ: {existing_oils}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å –¥–ª—è {user_input}:")
            else:
                total_cost = int(drops_counts.get(message.chat.id, 0))
                mix_info = "; ".join(drop_session_changes.get(message.chat.id, []))
                bot.reply_to(message, f"üéâ –°–º–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                                      f"üß™ *–°–æ—Å—Ç–∞–≤ —Å–º–µ—Å–∏:* {mix_info}\n"
                                      f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost}—Ä.", parse_mode="Markdown")
                
                drop_session_changes.pop(message.chat.id, None)
                drops_counts.pop(message.chat.id, None)
                user_states.pop(message.chat.id, None)

                send_bot_options(message.chat.id)

        elif state == WAITING_DROPS:
            if not user_input.isdigit():
                bot.reply_to(message, f'‚ö†Ô∏è "{user_input}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–µ–ª—å.')
                return

            drops = int(user_input)
            oil_name = current_oils[message.chat.id].capitalize()
            price_per_drop = int(df.loc[df["Name"] == oil_name, "Price"]) / (int(df.loc[df["Name"] == oil_name, "Vol"]) * 25)

            drops_counts[message.chat.id] += drops * price_per_drop
            drop_session_changes[message.chat.id].append(f"{oil_name}, {drops} –∫–∞–ø–µ–ª—å")

            bot.reply_to(message, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {oil_name}, {drops} –∫–∞–ø–µ–ª—å. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –º–∞—Å–ª–æ –∏–ª–∏ '*' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

            user_states[message.chat.id] = WAITING_NEXT_OIL

if __name__ == "__main__":
    bot.infinity_polling()
